import os
import sys
import gensim
import pprint
from gensim import corpora
from collections import defaultdict

# change directory to where the all samples are stored
if len(sys.argv) == 2:
    directory = sys.argv[1]
    print(directory)
elif len(sys.argv) == 1:
    print("Please add the dir where samples are stored as an argument")
elif len(sys.argv) > 2:
    print("Invalid # of arguemnts - too many")



# create dir that disassembled binaries will go into
outputDir_path = directory + "/objdumpOutput"
if not os.path.isdir(outputDir_path):
    os.mkdir(outputDir_path)

print("\n*********************************************")
print("Preparing to disassemble malware samples ...")
print("*********************************************\n")

os.chdir(directory)
files = os.listdir('.')
files.remove('objdumpOutput')

for filename in files:
    objdumpOutput_path = "./objdumpOutput/" + filename + ".txt"
    print(objdumpOutput_path)
    print("Disassembling sample " + str((files.index(filename) + 1)) + " of " + str(len(files)) + "...")
    cmd = "objdump -d " + filename + " > " + objdumpOutput_path
    os.system(cmd)

print("\n! Completed disassmbling samples !\n")
os.chdir('..')
print(os.getcwd())

# objdump = open('triple_fantasy.txt', 'r')

# # file to write the extracted instructions to
# instructions = open("triple_fantasy_instructions.txt", "w+")

# def parseInstructions(o,i):
#     lines = o.readlines()

#     for line in lines:
#         if ("..." in line):
#             continue

#         if(len(line.split('\t')) >= 3):
#             command = line.split('\t')[2]
#             instruction = command.split(" ")[0]
#         else:
#             continue

#         i.write(instruction + '\n')

#     i.close()
#     instructions = open("triple_fantasy_instructions.txt", "r")
#     i = instructions.read()
#     texts = [word for word in i.lower().split("\n")]

#     for text in texts:
#         if (text == " ") or (text == ""):
#             texts.remove(text)

#     # print(texts)
#     return texts

# def languageAnalysis(i):
#     frequency = defaultdict(int)
#     for token in i:
#         frequency[token] += 1

#     processed_corpus = [token for token in i if frequency[token] > 1]

#     # corpora.Dictionary() takes a list of lists as input
#     j = [processed_corpus]

#     dictionary = corpora.Dictionary(j)
#     print(dictionary)

# i = parseInstructions(objdump, instructions)

# objdump.close()

# languageAnalysis(i)
