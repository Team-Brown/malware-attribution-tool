import pprint #prints things is pretty-print format
from collections import defaultdict
from gensim import corpora, models, similarities
import matplotlib.pyplot as plt
import matplotlib.image as mpimg

document = "Human machine interface for lab abc computer applications"

text_corpus = [
    "Human machine interface for lab abc computer applications",
    "A survey of user opinion of computer system response time",
    "The EPS user interface management system",
    "System and human system engineering testing of EPS",
    "Relation of user perceived response time to error measurement",
    "The generation of random binary unordered trees",
    "The intersection graph of paths in trees",
    "Graph minors IV Widths of trees and well quasi ordering",
    "Graph minors A survey",
]

#create a set of frequent words
stoplist = set('for a of the and to in'.split(' '))

#lowercase each document, split it by whitespace, and fliter out stopwords
texts = [[word for word in document.lower().split() if word not in stoplist]
		for document in text_corpus]

#count word frequencies
frequency = defaultdict(int)

for text in texts: #text contains each document w/o whitespace and stopwords
	for token in text: #token contains words within text
		frequency[token] += 1

#only keep words that appear more than once
processed_corpus = [[token for token in text if frequency[token] > 1] for text in texts]
pprint.pprint(processed_corpus)
dictionary = corpora.Dictionary(processed_corpus)
print(dictionary)

pprint.pprint(dictionary.token2id) #what the heck is token2id

new_doc = "Human computer interaction"
new_vec = dictionary.doc2bow(new_doc.lower().split())
print(new_vec)

#converts entire original corpus to a list of vectors
bow_corpus = [dictionary.doc2bow(text) for text in processed_corpus]
pprint.pprint(bow_corpus)

tfidf = models.TfidfModel(bow_corpus) #train the model
words = "system minors".lower().split() #transform the "system minors" string
print(tfidf[dictionary.doc2bow(words)])

index = similarities.SparseMatrixSimilarity(tfidf[bow_corpus], num_features=12)

query_document = 'system engineering'.split()
query_bow = dictionary.doc2bow(query_document)
sims = index[tfidf[query_bow]]
print(list(enumerate(sims)))

for document_number, score in sorted(enumerate(sims), key=lambda x : x[1], reverse=True):
	print(document_number, score)

img = mpimg.imread('cat.png')
imgplot = plt.imshow(img)
plt.axis('off')
plt.show()
