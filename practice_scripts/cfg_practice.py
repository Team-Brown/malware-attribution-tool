import angr
from angrutils import *

# load your project
#p = angr.Project('/home/katie/malware-attribution-tool/samples/yes', load_options={'auto_load_libs': False})

# # Generate a static CFG
# cfg = p.analyses.CFGFast()

# # generate a dynamic CFG
# #cfg = p.analyses.CFGEmulated(keep_state=True)

# #plot_cfg(cfg, "ais3_cfg", asminst=True, remove_imports=True, remove_path_terminator=True)

# print("This is the graph:", cfg.graph)
# print("It has %d nodes and %d edges" % (len(cfg.graph.nodes()), len(cfg.graph.edges())))

# # this grabs *any* node at a given location:
# # entry_node = cfg.get_any_node(p.entry)

# # # on the other hand, this grabs all of the nodes
# # print("There were %d contexts for the entry block" % len(cfg.get_all_nodes(p.entry)))

# # # we can also look up predecessors and successors
# # print("Predecessors of the entry point:", entry_node.predecessors)
# # print("Successors of the entry point:", entry_node.successors)
# # print("Successors (and type of jump) of the entry point:", [ jumpkind + " to " + str(node.addr) for node,jumpkind in cfg.get_successors_and_jumpkind(entry_node) ])

proj = angr.Project("/home/katie/malware-attribution-tool/samples/dukes/onionDuke/366affd094cc63e2c19c5d57a6866b487889dab5d1b07c084fff94262d8a390b", load_options={'auto_load_libs':False})
main = proj.loader.main_object.get_symbol("main")
#start_state = proj.factory.blank_state(addr=main.rebased_addr)
cfg = proj.analyses.CFGFast()
plot_cfg(cfg, "onionDuke_cfg", asminst=True)  